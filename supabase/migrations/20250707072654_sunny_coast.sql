/*
  # MockMate Seed Data

  1. New Data
    - Creates sample users for testing
    - Adds comprehensive interview session data across all roles
    - Includes varied performance levels and realistic responses
    - Provides 30 days of historical data for testing

  2. Sample Users
    - Creates placeholder users for seed data
    - Uses realistic email addresses for testing

  3. Interview Sessions
    - Frontend Developer: Multiple sessions with different skill levels
    - Backend Developer: Advanced and beginner examples
    - Data Scientist: Practical ML project examples
    - DevOps Engineer: Production-ready infrastructure examples
*/

-- First, create sample users that the interview sessions will reference
-- Note: In production, these would be real users created through Supabase Auth
INSERT INTO auth.users (
  id,
  instance_id,
  aud,
  role,
  email,
  encrypted_password,
  email_confirmed_at,
  created_at,
  updated_at,
  confirmation_token,
  email_change,
  email_change_token_new,
  recovery_token
) VALUES 
(
  '00000000-0000-0000-0000-000000000001',
  '00000000-0000-0000-0000-000000000000',
  'authenticated',
  'authenticated',
  'demo.user1@mockmate.dev',
  '$2a$10$dummy.hash.for.seed.data.only',
  NOW(),
  NOW(),
  NOW(),
  '',
  '',
  '',
  ''
),
(
  '00000000-0000-0000-0000-000000000002',
  '00000000-0000-0000-0000-000000000000',
  'authenticated',
  'authenticated',
  'demo.user2@mockmate.dev',
  '$2a$10$dummy.hash.for.seed.data.only',
  NOW(),
  NOW(),
  NOW(),
  '',
  '',
  '',
  ''
);

-- Create corresponding entries in the public.users table if it exists
-- This handles the case where there might be a public users table
DO $$
BEGIN
  IF EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users') THEN
    INSERT INTO public.users (id, email, created_at) VALUES 
    ('00000000-0000-0000-0000-000000000001', 'demo.user1@mockmate.dev', NOW()),
    ('00000000-0000-0000-0000-000000000002', 'demo.user2@mockmate.dev', NOW())
    ON CONFLICT (id) DO NOTHING;
  END IF;
END $$;

-- Insert seed data for interview sessions
INSERT INTO interview_sessions (user_id, role, question, user_answer, feedback_text, score, session_id, created_at) VALUES
-- Session 1: Frontend Developer (Good Performance)
('00000000-0000-0000-0000-000000000001', 'Frontend Developer', 'Tell me about your experience with React and modern frontend frameworks.', 'I have been working with React for about 3 years now. I started with class components and then transitioned to functional components with hooks. I''ve built several applications using React, including e-commerce sites and dashboards. I''m also familiar with Next.js for server-side rendering and have experience with state management using Redux and Context API.', 'Excellent response! You demonstrated solid experience progression from class to functional components, which shows you''ve kept up with React''s evolution. Mentioning specific project types like e-commerce and dashboards gives concrete examples. Your knowledge of Next.js and state management tools shows depth. Consider elaborating on specific challenges you''ve overcome or performance optimizations you''ve implemented.', 8, 'session_001', NOW() - INTERVAL '5 days'),

('00000000-0000-0000-0000-000000000001', 'Frontend Developer', 'How do you handle state management in large React applications?', 'For large applications, I typically use Redux Toolkit for global state management. I organize the store into feature-based slices and use RTK Query for API calls. For component-level state, I stick with useState and useReducer. I also implement proper state normalization to avoid deeply nested objects and use selectors to prevent unnecessary re-renders.', 'Outstanding answer! You show deep understanding of state management patterns. Using Redux Toolkit demonstrates modern best practices, and mentioning RTK Query shows you understand the ecosystem. State normalization and selector usage indicates performance awareness. You could enhance this by discussing when you might choose Context API over Redux or how you handle state persistence.', 9, 'session_001', NOW() - INTERVAL '5 days'),

('00000000-0000-0000-0000-000000000001', 'Frontend Developer', 'Explain the difference between client-side and server-side rendering.', 'Client-side rendering means the browser downloads a minimal HTML file and JavaScript handles rendering the content. This provides fast navigation after initial load but can have SEO issues. Server-side rendering generates HTML on the server for each request, providing better SEO and faster initial page loads but slower navigation. Next.js offers both approaches and hybrid solutions like static generation.', 'Great explanation covering the key trade-offs! You correctly identified the SEO and performance implications of each approach. Mentioning Next.js shows practical knowledge of modern solutions. To strengthen this answer, you could discuss specific use cases for each approach, mention Core Web Vitals impact, or explain how hydration works in SSR frameworks.', 7, 'session_001', NOW() - INTERVAL '5 days'),

('00000000-0000-0000-0000-000000000001', 'Frontend Developer', 'How do you optimize web application performance?', 'I focus on several areas: code splitting with React.lazy() to reduce bundle size, image optimization using next/image or lazy loading, minimizing re-renders with React.memo and useMemo, implementing virtual scrolling for large lists, and using service workers for caching. I also monitor performance with Lighthouse and React DevTools Profiler.', 'Excellent comprehensive approach! You covered multiple optimization strategies from bundle optimization to runtime performance. Mentioning specific tools like React.lazy(), React.memo, and monitoring tools shows hands-on experience. Virtual scrolling for large datasets demonstrates advanced knowledge. Consider adding discussion of Critical Rendering Path optimization or modern loading strategies like prefetching.', 8, 'session_001', NOW() - INTERVAL '5 days'),

('00000000-0000-0000-0000-000000000001', 'Frontend Developer', 'Describe your approach to responsive design and CSS architecture.', 'I use a mobile-first approach with CSS Grid and Flexbox for layouts. I implement a design system with CSS custom properties for consistent theming and use utility-first frameworks like Tailwind CSS for rapid development. For component styling, I prefer CSS Modules or styled-components to avoid global conflicts. I also ensure accessibility with proper semantic HTML and ARIA attributes.', 'Strong answer demonstrating modern CSS practices! Mobile-first approach and CSS Grid/Flexbox usage shows current best practices. Design systems and utility frameworks indicate scalable thinking. Component-scoped styling solutions show awareness of maintainability issues. Accessibility mention is excellent. You could enhance by discussing CSS-in-JS trade-offs or performance implications of different styling approaches.', 8, 'session_001', NOW() - INTERVAL '5 days'),

-- Session 2: Frontend Developer (Average Performance)
('00000000-0000-0000-0000-000000000001', 'Frontend Developer', 'Tell me about your experience with React and modern frontend frameworks.', 'I''ve been using React for about a year. I know how to create components and use hooks like useState and useEffect. I''ve built a few small projects like a todo app and a weather app. I''m still learning about more advanced concepts.', 'Good start! You have the fundamentals down with components and basic hooks. Building projects like todo and weather apps shows practical application. To improve, try tackling more complex projects that require advanced patterns like custom hooks, context API, or state management libraries. Consider learning about React performance optimization and testing practices.', 6, 'session_002', NOW() - INTERVAL '12 days'),

('00000000-0000-0000-0000-000000000001', 'Frontend Developer', 'How do you handle state management in large React applications?', 'I usually just use useState for everything. Sometimes I pass props down through multiple components. I''ve heard of Redux but haven''t used it much. I know there''s also something called Context API but I''m not sure when to use it.', 'You''re on the right track with useState for local state. However, for large applications, prop drilling (passing props through multiple components) becomes problematic. I''d recommend learning Context API for sharing state across components and Redux or Zustand for complex global state. Start with Context API for simpler cases and explore Redux Toolkit for more complex scenarios.', 5, 'session_002', NOW() - INTERVAL '12 days'),

('00000000-0000-0000-0000-000000000001', 'Frontend Developer', 'Explain the difference between client-side and server-side rendering.', 'Client-side rendering is when JavaScript runs in the browser to show content. Server-side rendering is when the server creates the HTML before sending it to the browser. I think SSR is better for SEO but I''m not completely sure about the details.', 'You have the basic concept correct! CSR does use JavaScript in the browser, and SSR does generate HTML on the server. You''re right that SSR is generally better for SEO. To deepen your understanding, learn about the performance trade-offs: SSR has faster initial page loads but CSR has faster subsequent navigation. Also explore modern solutions like Next.js that offer both approaches.', 6, 'session_002', NOW() - INTERVAL '12 days'),

('00000000-0000-0000-0000-000000000001', 'Frontend Developer', 'How do you optimize web application performance?', 'I try to make my images smaller and not use too many large libraries. I''ve heard about lazy loading but haven''t implemented it yet. I usually just check if my app loads fast enough.', 'Image optimization is a great start! Reducing bundle size by avoiding unnecessary libraries is also good thinking. I''d recommend learning about lazy loading for images and components, code splitting to reduce initial bundle size, and using tools like Lighthouse to measure performance objectively. Also explore React-specific optimizations like React.memo and useMemo.', 5, 'session_002', NOW() - INTERVAL '12 days'),

('00000000-0000-0000-0000-000000000001', 'Frontend Developer', 'Describe your approach to responsive design and CSS architecture.', 'I use media queries to make things look good on mobile and desktop. I mostly write regular CSS and sometimes use Bootstrap. I try to make sure everything fits on smaller screens.', 'Media queries are essential for responsive design, and ensuring mobile compatibility is important. To improve your approach, consider learning CSS Grid and Flexbox for more flexible layouts, adopting a mobile-first methodology, and exploring modern CSS frameworks like Tailwind CSS. Also consider component-scoped styling solutions to avoid CSS conflicts in larger applications.', 5, 'session_002', NOW() - INTERVAL '12 days'),

-- Backend Developer Sessions
('00000000-0000-0000-0000-000000000001', 'Backend Developer', 'Explain your experience with API design and RESTful services.', 'I have extensive experience designing RESTful APIs following REST principles. I use proper HTTP methods (GET, POST, PUT, DELETE), implement consistent URL patterns, and return appropriate status codes. I''ve built APIs using Node.js with Express and Python with FastAPI. I always implement proper error handling, request validation, and API versioning. I also document APIs using OpenAPI/Swagger.', 'Excellent comprehensive answer! You demonstrate solid understanding of REST principles and practical experience with multiple technologies. Mentioning proper HTTP methods, status codes, and URL patterns shows attention to standards. Error handling, validation, and versioning indicate production-ready thinking. API documentation with OpenAPI is a great practice. Consider discussing rate limiting, caching strategies, or GraphQL as alternative approaches.', 9, 'session_003', NOW() - INTERVAL '8 days'),

('00000000-0000-0000-0000-000000000001', 'Backend Developer', 'How do you handle database optimization and scaling?', 'I start with proper indexing on frequently queried columns and analyze query performance using EXPLAIN plans. For scaling, I implement read replicas for read-heavy workloads and consider database sharding for very large datasets. I use connection pooling to manage database connections efficiently and implement caching with Redis for frequently accessed data. I also monitor database performance metrics regularly.', 'Outstanding approach to database optimization! Your mention of indexing, EXPLAIN plans, and performance monitoring shows systematic thinking. Read replicas and sharding demonstrate understanding of scaling strategies. Connection pooling and Redis caching are excellent performance optimizations. You could enhance this by discussing database normalization vs denormalization trade-offs or specific caching patterns like cache-aside or write-through.', 9, 'session_003', NOW() - INTERVAL '8 days'),

('00000000-0000-0000-0000-000000000001', 'Backend Developer', 'Describe your approach to error handling and logging.', 'I implement structured error handling with custom error classes and consistent error response formats. I use try-catch blocks appropriately and avoid exposing sensitive information in error messages. For logging, I use structured logging with different levels (debug, info, warn, error) and include correlation IDs for request tracing. I centralize logs using tools like ELK stack and set up alerts for critical errors.', 'Excellent error handling strategy! Custom error classes and consistent response formats show professional approach. Security awareness by not exposing sensitive data is crucial. Structured logging with correlation IDs demonstrates understanding of distributed systems debugging. ELK stack usage and alerting show production operations experience. Consider mentioning circuit breaker patterns or how you handle retries and timeouts.', 8, 'session_003', NOW() - INTERVAL '8 days'),

('00000000-0000-0000-0000-000000000001', 'Backend Developer', 'How do you ensure security in backend applications?', 'I implement authentication using JWT tokens with proper expiration and refresh mechanisms. I validate and sanitize all input data to prevent injection attacks and use parameterized queries. I implement rate limiting to prevent abuse and use HTTPS for all communications. I also follow principle of least privilege for database access and regularly update dependencies to patch security vulnerabilities.', 'Strong security-focused answer! JWT implementation with refresh tokens shows modern auth practices. Input validation and parameterized queries demonstrate awareness of common vulnerabilities. Rate limiting and HTTPS are essential security measures. Principle of least privilege and dependency management show comprehensive security thinking. Consider adding discussion of CORS policies, security headers, or secrets management practices.', 8, 'session_003', NOW() - INTERVAL '8 days'),

('00000000-0000-0000-0000-000000000001', 'Backend Developer', 'Explain your experience with microservices architecture.', 'I''ve designed and implemented microservices using Docker containers and Kubernetes for orchestration. I use API gateways for routing and implement service discovery for dynamic service communication. I handle distributed transactions carefully, often using event-driven architecture with message queues like RabbitMQ. I also implement proper monitoring and distributed tracing to debug issues across services.', 'Excellent microservices knowledge! Docker and Kubernetes usage shows modern deployment practices. API gateways and service discovery indicate understanding of service mesh concepts. Event-driven architecture and message queues demonstrate handling of distributed system challenges. Monitoring and distributed tracing show operational maturity. You could enhance by discussing data consistency patterns or how you handle service versioning and backward compatibility.', 9, 'session_003', NOW() - INTERVAL '8 days'),

-- Data Scientist Sessions
('00000000-0000-0000-0000-000000000001', 'Data Scientist', 'Describe your experience with machine learning algorithms.', 'I have experience with both supervised and unsupervised learning algorithms. For supervised learning, I''ve used linear regression, random forests, and neural networks. I''ve implemented clustering algorithms like K-means and hierarchical clustering for unsupervised tasks. I understand when to use different algorithms based on data characteristics and problem requirements. I''ve worked with scikit-learn, TensorFlow, and PyTorch.', 'Good foundation in ML algorithms! You covered both supervised and unsupervised learning with specific examples. Mentioning multiple frameworks shows practical experience. Understanding algorithm selection based on problem requirements is crucial. To strengthen your answer, discuss specific use cases where you''ve applied these algorithms, model evaluation metrics you use, or how you handle overfitting and bias-variance tradeoff.', 7, 'session_004', NOW() - INTERVAL '15 days'),

('00000000-0000-0000-0000-000000000001', 'Data Scientist', 'How do you handle data cleaning and preprocessing?', 'I start with exploratory data analysis to understand data quality issues. I handle missing values using appropriate strategies like imputation or removal based on the missingness pattern. I detect and handle outliers using statistical methods or domain knowledge. For categorical data, I use encoding techniques like one-hot encoding or label encoding. I also normalize or standardize numerical features when necessary and create new features through feature engineering.', 'Excellent systematic approach to data preprocessing! Starting with EDA shows good methodology. Your understanding of different missing value strategies and outlier detection demonstrates depth. Mentioning appropriate encoding techniques and feature scaling shows technical knowledge. Feature engineering mention is great. Consider discussing data validation techniques, handling imbalanced datasets, or automated preprocessing pipelines.', 8, 'session_004', NOW() - INTERVAL '15 days'),

('00000000-0000-0000-0000-000000000001', 'Data Scientist', 'Explain your approach to model validation and evaluation.', 'I use cross-validation techniques like k-fold CV to get robust performance estimates. I split data into train, validation, and test sets to avoid overfitting. For classification, I use metrics like accuracy, precision, recall, and F1-score depending on the problem. For regression, I use RMSE, MAE, and R-squared. I also create confusion matrices and ROC curves for deeper analysis and always validate on unseen data.', 'Strong model evaluation approach! Cross-validation and proper data splitting show good practices. You mentioned appropriate metrics for different problem types, which demonstrates understanding. Confusion matrices and ROC curves indicate thorough analysis approach. Validating on unseen data is crucial. Consider discussing how you handle class imbalance in evaluation, statistical significance testing, or business metric alignment.', 8, 'session_004', NOW() - INTERVAL '15 days'),

('00000000-0000-0000-0000-000000000001', 'Data Scientist', 'How do you communicate complex findings to non-technical stakeholders?', 'I focus on storytelling with data, starting with business context and key insights rather than technical details. I use clear visualizations like charts and graphs that are easy to understand. I avoid jargon and explain concepts in business terms. I always connect findings to business impact and provide actionable recommendations. I also prepare different levels of detail for different audiences.', 'Excellent communication strategy! Starting with business context and focusing on insights rather than technical details is crucial. Clear visualizations and avoiding jargon show audience awareness. Connecting to business impact and providing actionable recommendations demonstrates value creation. Tailoring detail level to audience is professional. Consider discussing how you handle questions about model limitations or uncertainty in your findings.', 8, 'session_004', NOW() - INTERVAL '15 days'),

('00000000-0000-0000-0000-000000000001', 'Data Scientist', 'Describe a challenging data science project you''ve worked on.', 'I worked on a customer churn prediction project where we had highly imbalanced data with only 5% churn rate. The challenge was building a model that could accurately identify potential churners without too many false positives. I used techniques like SMOTE for oversampling, cost-sensitive learning, and ensemble methods. I also had to deal with temporal data leakage and ensure the model was interpretable for business users.', 'Great example of a real-world challenge! Imbalanced data is a common issue and you mentioned appropriate techniques like SMOTE and cost-sensitive learning. Addressing temporal data leakage shows understanding of common pitfalls. Considering model interpretability for business users demonstrates practical thinking. You could enhance by discussing specific metrics you optimized for, how you validated the business impact, or deployment challenges you faced.', 7, 'session_004', NOW() - INTERVAL '15 days'),

-- DevOps Engineer Sessions
('00000000-0000-0000-0000-000000000001', 'DevOps Engineer', 'Explain your experience with containerization and orchestration.', 'I have extensive experience with Docker for containerization, creating optimized Dockerfiles with multi-stage builds to reduce image size. I use Kubernetes for orchestration, managing deployments, services, and ingress controllers. I''ve implemented auto-scaling based on CPU and memory metrics and use Helm charts for application packaging. I also work with service meshes like Istio for advanced traffic management and security.', 'Outstanding containerization and orchestration knowledge! Multi-stage Docker builds show optimization awareness. Kubernetes experience with deployments, services, and ingress demonstrates comprehensive understanding. Auto-scaling and Helm usage indicate production-ready skills. Service mesh experience with Istio shows advanced knowledge. Consider discussing container security practices, resource management strategies, or GitOps workflows for deployment automation.', 9, 'session_005', NOW() - INTERVAL '3 days'),

('00000000-0000-0000-0000-000000000001', 'DevOps Engineer', 'How do you implement CI/CD pipelines?', 'I design CI/CD pipelines using tools like Jenkins, GitLab CI, or GitHub Actions. The pipeline includes automated testing, security scanning, and code quality checks. I implement blue-green or canary deployments for zero-downtime releases. I use artifact repositories for storing build outputs and implement proper rollback mechanisms. I also integrate monitoring and alerting to catch issues early in the deployment process.', 'Excellent CI/CD implementation approach! Mentioning multiple tools shows flexibility. Including automated testing, security scanning, and quality checks demonstrates comprehensive pipeline design. Blue-green and canary deployments show advanced deployment strategies. Artifact management and rollback mechanisms indicate production readiness. Monitoring integration is crucial. Consider discussing pipeline as code, branch strategies, or how you handle database migrations in CI/CD.', 9, 'session_005', NOW() - INTERVAL '3 days'),

('00000000-0000-0000-0000-000000000001', 'DevOps Engineer', 'Describe your approach to monitoring and alerting.', 'I implement comprehensive monitoring using Prometheus for metrics collection and Grafana for visualization. I set up application performance monitoring with tools like New Relic or DataDog. I create meaningful alerts based on SLIs and SLOs rather than just threshold-based alerts. I use log aggregation with ELK stack and implement distributed tracing for microservices. I also ensure alerts are actionable and include runbooks for incident response.', 'Excellent monitoring strategy! Prometheus and Grafana combination is industry standard. APM tools usage shows application-level monitoring awareness. SLI/SLO-based alerting demonstrates mature monitoring practices. ELK stack and distributed tracing show comprehensive observability approach. Actionable alerts with runbooks indicate operational maturity. Consider discussing on-call practices, alert fatigue prevention, or chaos engineering for resilience testing.', 9, 'session_005', NOW() - INTERVAL '3 days'),

('00000000-0000-0000-0000-000000000001', 'DevOps Engineer', 'How do you handle infrastructure as code?', 'I use Terraform for infrastructure provisioning across multiple cloud providers. I organize code into reusable modules and implement proper state management with remote backends. I use Ansible for configuration management and application deployment. I version control all infrastructure code and implement CI/CD for infrastructure changes. I also use tools like Terragrunt for managing multiple environments and implement policy as code with tools like Open Policy Agent.', 'Outstanding IaC approach! Terraform usage with modules and remote state shows best practices. Multi-cloud experience and Ansible for configuration management demonstrate comprehensive automation. Version control and CI/CD for infrastructure indicate treating infrastructure as software. Terragrunt and policy as code show advanced practices. Consider discussing drift detection, cost optimization strategies, or disaster recovery automation.', 9, 'session_005', NOW() - INTERVAL '3 days'),

('00000000-0000-0000-0000-000000000001', 'DevOps Engineer', 'Explain your experience with cloud platforms and services.', 'I have extensive experience with AWS, using services like EC2, EKS, RDS, and Lambda. I implement auto-scaling groups and load balancers for high availability. I use CloudFormation and CDK for infrastructure automation. I''ve also worked with Azure and GCP, understanding their equivalent services. I implement proper IAM policies following least privilege principle and use cloud-native monitoring and logging services.', 'Strong cloud platform knowledge! Multi-cloud experience with AWS, Azure, and GCP shows versatility. Mentioning specific services like EKS and Lambda demonstrates hands-on experience. Auto-scaling and load balancing show availability awareness. Infrastructure automation with CloudFormation/CDK is excellent. IAM and security focus is crucial. Consider discussing cost optimization strategies, multi-region deployments, or cloud migration experiences.', 8, 'session_005', NOW() - INTERVAL '3 days'),

-- Additional sessions with lower scores to show variety
('00000000-0000-0000-0000-000000000001', 'Frontend Developer', 'Tell me about your experience with React and modern frontend frameworks.', 'I''ve used React a few times in tutorials and built a simple calculator app. I know about components and JSX but I''m still learning. I haven''t used any other frameworks yet.', 'You''re taking the right first steps with React! Building a calculator app shows you can apply the basics. Understanding components and JSX is fundamental. To progress, try building more complex projects that require state management, API integration, and routing. Consider learning about React hooks and exploring other frameworks like Vue or Angular to broaden your perspective.', 4, 'session_006', NOW() - INTERVAL '20 days'),

('00000000-0000-0000-0000-000000000001', 'Backend Developer', 'Explain your experience with API design and RESTful services.', 'I''ve built a few simple APIs using Express.js. I know about GET and POST requests and return JSON data. I''m not sure about all the REST principles but I try to make URLs that make sense.', 'Good start with Express.js and understanding basic HTTP methods! Returning JSON and thinking about URL structure shows you''re on the right track. To improve, learn about all HTTP methods (PUT, DELETE, PATCH), proper status codes, and REST principles like statelessness. Also explore API documentation tools and error handling patterns.', 5, 'session_007', NOW() - INTERVAL '25 days'),

('00000000-0000-0000-0000-000000000001', 'Data Scientist', 'Describe your experience with machine learning algorithms.', 'I''ve done some online courses and used scikit-learn for basic classification problems. I know about linear regression and decision trees but haven''t worked on real projects yet. I''m still learning about when to use different algorithms.', 'Great foundation with online courses and scikit-learn experience! Linear regression and decision trees are excellent starting algorithms. The key next step is applying this knowledge to real datasets with messy, real-world problems. Try working on Kaggle competitions or personal projects to gain practical experience with data preprocessing, feature engineering, and model evaluation.', 5, 'session_008', NOW() - INTERVAL '18 days'),

-- Different user with strong performance
('00000000-0000-0000-0000-000000000002', 'DevOps Engineer', 'Explain your experience with containerization and orchestration.', 'I''ve been working with Docker for 4 years and Kubernetes for 2 years. I''ve migrated legacy applications to containers and set up production K8s clusters on AWS EKS. I use GitOps with ArgoCD for deployments and implement comprehensive monitoring with Prometheus and Grafana. I''ve also worked with service mesh technologies like Istio for advanced traffic management.', 'Exceptional experience! Your progression from Docker to Kubernetes shows natural skill development. Production EKS experience and GitOps with ArgoCD demonstrates modern deployment practices. Comprehensive monitoring setup and service mesh experience indicate advanced DevOps maturity. Your practical experience with legacy migration is valuable. Consider sharing specific challenges you''ve overcome or how you''ve optimized cluster costs.', 9, 'session_009', NOW() - INTERVAL '2 days'),

('00000000-0000-0000-0000-000000000002', 'DevOps Engineer', 'How do you implement CI/CD pipelines?', 'I design pipelines with multiple stages: build, test, security scan, and deploy. I use Jenkins with Pipeline as Code and integrate SonarQube for code quality. I implement parallel testing to reduce pipeline time and use Docker for consistent build environments. For deployments, I use blue-green strategy with automated rollback on failure. I also implement feature flags for safer releases.', 'Outstanding pipeline design! Multi-stage approach with security integration shows comprehensive thinking. Pipeline as Code and SonarQube integration demonstrate best practices. Parallel testing optimization and Docker usage show efficiency focus. Blue-green deployments with automated rollback indicate production-ready practices. Feature flags usage shows advanced release management. Consider discussing how you handle database schema changes or secrets management in pipelines.', 9, 'session_009', NOW() - INTERVAL '2 days');